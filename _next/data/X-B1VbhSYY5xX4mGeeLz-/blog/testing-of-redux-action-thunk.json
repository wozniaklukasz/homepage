{"pageProps":{"postData":{"id":"testing-of-redux-action-thunk","contentHtml":"<p>In this post, I will present some practical ways to test an application that uses thunks from the redux-thunk [https://github.com/reduxjs/redux-thunk] library.</p>\n<p>While browsing the web looking for ways and good practices to test redux-thunk, many times I came across tests that check implementation details, not logic.</p>\n<p>I don't see much sense in such an approach, which will almost certainly be expensive to maintain - testing will become sensitive to change. What should be of interest to us is the effect of dispatched action on the state and possible check of selectors, if we have any.</p>\n<h2>Thunk implementations test</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Arrange</span>\n<span class=\"hljs-keyword\">const</span> store = mockStore(initialState);\n\n<span class=\"hljs-comment\">// Act</span>\n<span class=\"hljs-keyword\">await</span> store.dispatch(someThunkFunction(requestPayload));\n\n<span class=\"hljs-comment\">// Assert</span>\n<span class=\"hljs-keyword\">const</span> expectedActions = [\n someImplementedFunction_1(<span class=\"hljs-literal\">true</span>), <span class=\"hljs-comment\">// expectation of implementation details</span>\n someImplementedFunction_2(<span class=\"hljs-string\">'some param'</span>),\n someImplementedFunction_3(<span class=\"hljs-number\">123</span>)\n];\n<span class=\"hljs-keyword\">const</span> actions = store.getActions();\n\nexpect(actions).toEqual(expectedActions);</code></pre>\n<p>The above example checks the actions executed by <code>someThunkFunction</code>. The <code>mockStore</code> function used in the example comes from the redux-mock-store [https://github.com/reduxjs/redux-mock-store] library.</p>\n<p>Imagine you are doing refactoring and changing the implementation of <code>someThunkFunction</code>. From now on, calling two instead of three functions will set the appropriate state of the application.</p>\n<pre><code class=\"hljs language-diff\">someImplementedFunction_1(true),\n<span class=\"hljs-addition\">+ someImplementedFunction_2('some param', 123),</span>\n<span class=\"hljs-deletion\">- someImplementedFunction_3(123)</span></code></pre>\n<p>If we change its implementation details, e.g. it will contain 2 actions instead of 3, but the effect on the state remains the same - the test will not pass. We will have to change the expected games to online games. The information from this test is, in my opinion, useless.</p>\n<h2>Some theory</h2>\n<p>When writing tests, we will follow a few rules:\nthe unit in our unit test is a single functionality of a given slice,\nwe skip testing actions and action-creators because they should not contain anything worth testing (the example presented at the end of the post is based on the Redux Toolkit [https://redux-toolkit.js.org/], which manages them itself),\nwe will focus only on thunks, single actions and selectors should be trivial, and as in the previous point - not worth testing,\nactions and selectors not covered by thunk tests are best to cover when testing the components that use them.</p>\n<h2>State test after thunk dispatch</h2>\n<p>We dispatch the thunk and check the state of the application we are interested in with the appropriate selectors if we have any. Otherwise, we compare individual elements of the obtained state with expectations (never add additional selectors only for testing!). This allows us to freely modify <code>someThunkFunction</code>.</p>\n<p>As long as the state is correct - we have a green test and we do not bother with it. If the result is different after the changes, we will get valuable information. We will see what the state after the dispatch looks like and decide whether to fix the implementation or adapt the test to the new state.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Arrange</span>\n<span class=\"hljs-keyword\">const</span> store = mockStore(initialState);\n\n<span class=\"hljs-comment\">// Act</span>\n<span class=\"hljs-keyword\">await</span> store.dispatch(someThunkFunction(requestPayload));\n\n<span class=\"hljs-comment\">// Assert</span>\n<span class=\"hljs-keyword\">const</span> expectedState = {\n <span class=\"hljs-attr\">app</span>: {\n   <span class=\"hljs-attr\">someBoolean</span>: <span class=\"hljs-literal\">true</span>,\n   <span class=\"hljs-attr\">someString</span>: <span class=\"hljs-string\">'some param'</span>,\n   <span class=\"hljs-attr\">someNumber</span>: <span class=\"hljs-number\">123</span>\n }\n}\n<span class=\"hljs-keyword\">const</span> state = store.getState();\n\nexpect(state).toEqual(expectedState);</code></pre>\n<h2>Example of redux-thunk test</h2>\n<p>The example is based on the CRA from the Redux and TypeScript template [https://github.com/reduxjs/cra-template-redux-typescript].</p>\n<p>To write tests as shown, you must enable state creation with an initial value of <code>preloadedState</code>.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// getStore.ts</span>\n\n<span class=\"hljs-comment\">// configureStore with preloadedState</span>\n<span class=\"hljs-keyword\">const</span> rootReducer = combineReducers({\n <span class=\"hljs-attr\">epics</span>: epicsReducer,\n <span class=\"hljs-attr\">tasks</span>: taskReducer\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> getStore = <span class=\"hljs-function\">(<span class=\"hljs-params\">preloadedState?: <span class=\"hljs-built_in\">any</span></span>) =></span> configureStore({\n <span class=\"hljs-attr\">reducer</span>: rootReducer,\n preloadedState\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> RootState = ReturnType&#x3C;<span class=\"hljs-keyword\">typeof</span> rootReducer>;</code></pre>\n<p>In our simple example, we have an array of Epic and Task objects. Tasks have an <code>epicId</code> field indicating the Epic they belong to.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// epicsSlice.ts</span>\n<span class=\"hljs-keyword\">interface</span> Epic {\n <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n name: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-comment\">// tasksSlice.ts</span>\n<span class=\"hljs-keyword\">interface</span> Task {\n <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n epicId: <span class=\"hljs-built_in\">number</span>; <span class=\"hljs-comment\">// points on epic id</span>\n name: <span class=\"hljs-built_in\">string</span>;\n}</code></pre>\n","title":"Testing of redux action thunk","date":"2020-01-01","tags":["typescript","redux"]}},"__N_SSG":true}