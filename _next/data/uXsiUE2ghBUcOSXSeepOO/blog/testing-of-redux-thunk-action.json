{"pageProps":{"postData":{"id":"testing-of-redux-thunk-action","contentHtml":"<p>In this post, I will present some practical approaches to test an application that uses thunks from the <a href=\"https://github.com/reduxjs/redux-thunk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">redux-thunk</a> library.</p>\n<p>While browsing the web looking for ways and good practices to test redux state, many times I came across tests that check implementation details, not logic.</p>\n<p>I don't see much sense in such an approach, which will almost certainly be expensive to maintain - testing will become sensitive to change. What should be of interest to us is the effect of dispatched action on the state and possible check of selectors, if we have any.</p>\n<h2>Thunk implementations test</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Arrange</span>\n<span class=\"hljs-keyword\">const</span> store = mockStore(initialState);\n\n<span class=\"hljs-comment\">// Act</span>\n<span class=\"hljs-keyword\">await</span> store.dispatch(someThunkFunction(requestPayload));\n\n<span class=\"hljs-comment\">// Assert</span>\n<span class=\"hljs-keyword\">const</span> expectedActions = [\n someImplementedFunction_1(<span class=\"hljs-literal\">true</span>), <span class=\"hljs-comment\">// expectation of implementation details</span>\n someImplementedFunction_2(<span class=\"hljs-string\">'some param'</span>),\n someImplementedFunction_3(<span class=\"hljs-number\">123</span>)\n];\n<span class=\"hljs-keyword\">const</span> actions = store.getActions();\n\nexpect(actions).toEqual(expectedActions);</code></pre>\n<p>The above example checks the actions executed by <code>someThunkFunction</code>. The <code>mockStore</code> function used in the example comes from the <a href=\"https://github.com/reduxjs/redux-mock-store\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">redux-mock-store</a> library.</p>\n<p>Imagine you are doing refactoring and changing the implementation of <code>someThunkFunction</code>. From now on, calling two instead of three functions will set the appropriate state of the application.</p>\n<pre><code class=\"hljs language-diff\">someImplementedFunction_1(true),\n<span class=\"hljs-addition\">+ someImplementedFunction_2('some param', 123),</span>\n<span class=\"hljs-deletion\">- someImplementedFunction_3(123)</span></code></pre>\n<p>If we change its implementation details, e.g. it will contain 2 actions instead of 3, but the effect on the state remains the same - the test will not pass. The information from this test is, in my opinion, useless.</p>\n<h2>State test after thunk dispatch</h2>\n<p>In this post, I will focus on testing async thunk action. We skip testing actions and action-creators because they should not contain anything worth testing (the example presented at the end of the post is based on the <a href=\"https://redux-toolkit.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redux Toolkit</a>, which manages them itself). Single actions and selectors should be trivial.</p>\n<p>We dispatch the thunk and check the state of the application we are interested in with the appropriate selectors (if we have any). Otherwise, we compare individual elements of the obtained state with expectations (never add additional selectors only for testing!). This allows us to freely modify <code>someThunkFunction</code>.</p>\n<p>As long as the state is correct - we have a green test and we do not bother with it. If the result is different after the changes, we will get valuable information. We will see what the state after the dispatch looks like and decide whether to fix the implementation or adapt the test to the new state.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">// Arrange</span>\n<span class=\"hljs-keyword\">const</span> store = mockStore(initialState);\n\n<span class=\"hljs-comment\">// Act</span>\n<span class=\"hljs-keyword\">await</span> store.dispatch(someThunkFunction(requestPayload));\n\n<span class=\"hljs-comment\">// Assert</span>\n<span class=\"hljs-keyword\">const</span> expectedState = {\n <span class=\"hljs-attr\">app</span>: {\n   <span class=\"hljs-attr\">someBoolean</span>: <span class=\"hljs-literal\">true</span>,\n   <span class=\"hljs-attr\">someString</span>: <span class=\"hljs-string\">'some param'</span>,\n   <span class=\"hljs-attr\">someNumber</span>: <span class=\"hljs-number\">123</span>\n }\n}\n<span class=\"hljs-keyword\">const</span> state = store.getState();\n\nexpect(state).toEqual(expectedState);</code></pre>\n<h2>Example of redux-thunk test</h2>\n<p>To write tests as shown, you must enable state creation with an initial value of <code>preloadedState</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// getStore.ts</span>\n\n<span class=\"hljs-keyword\">const</span> rootReducer = combineReducers({\n  <span class=\"hljs-attr\">epics</span>: epicsReducer,\n  <span class=\"hljs-attr\">tasks</span>: tasksReducer\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> getStore = <span class=\"hljs-function\">(<span class=\"hljs-params\">preloadedState</span>) =></span> configureStore({\n  <span class=\"hljs-attr\">reducer</span>: rootReducer,\n  <span class=\"hljs-attr\">middleware</span>: [thunk],\n  <span class=\"hljs-comment\">// configureStore with preloadedState</span>\n  preloadedState\n});</code></pre>\n<p>In our simple example, we have an array of Epic and Task objects. Tasks have an <code>epicId</code> field indicating the Epic they belong to. We will try to write test that removes epic with <code>id === 0</code> and tasks with <code>epicId === 0</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// epicsSlice.ts</span>\n\n<span class=\"hljs-keyword\">const</span> preloadedState = {\n    <span class=\"hljs-attr\">epics</span>: {\n        <span class=\"hljs-attr\">list</span>: [\n            {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'epic 0'</span>}, <span class=\"hljs-comment\">// epic to remove</span>\n            {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'epic 1'</span>},\n        ]\n    },\n    <span class=\"hljs-attr\">tasks</span>: {\n        <span class=\"hljs-attr\">list</span>: [\n            {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">epicId</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'epic 0 first task'</span>}, <span class=\"hljs-comment\">// task to remove (epicId: 0)</span>\n            {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">epicId</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'epic 0 second task'</span>}, <span class=\"hljs-comment\">// task to remove (epicId: 0)</span>\n            {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">epicId</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'epic 1 first task'</span>},\n            {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">epicId</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'epic 1 second task'</span>},\n        ]\n    }\n};</code></pre>\n<p>Let's create the method <code>removeEpicAndItsTasksThunk</code> that removes an Epic and all Tasks pointing to that Epic based on the given <code>id</code>. To complicate the example a bit, we will add a <code>Promise</code> that returns ids of Tasks to delete.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> removeEpicAndItsTasksThunk = createAsyncThunk(<span class=\"hljs-string\">'removeEpicAndItsTasks'</span>, <span class=\"hljs-keyword\">async</span> (epicId, {\n  getState,\n  dispatch\n}) => {\n  <span class=\"hljs-keyword\">const</span> state = getState();\n\n  <span class=\"hljs-keyword\">const</span> tasksId = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =></span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Waiting for some async action.'</span>);\n\n    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n      <span class=\"hljs-keyword\">const</span> ids = state.tasks.list\n        .filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">task</span>) =></span> task.epicId === epicId)\n        .map(<span class=\"hljs-function\">(<span class=\"hljs-params\">task</span>) =></span> task.id);\n\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Async action resolved after (at least) 2000ms.'</span>);\n      resolve(ids);\n    }, <span class=\"hljs-number\">2000</span>);\n  });\n\n  dispatch(removeTasksById(tasksId));\n  dispatch(removeEpicById(epicId));\n});</code></pre>\n<h3>Arrange</h3>\n<p>Thanks to <code>preloadedState</code> we can initialize the state the way we need. As I mentioned - we want to be sure, that the Epic and all Tasks in this Epic will be removed.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Arrange</span>\n<span class=\"hljs-keyword\">const</span> preloadedState = {\n<span class=\"hljs-attr\">epics</span>: {\n  <span class=\"hljs-attr\">list</span>: [\n    {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'epic 0'</span>}, <span class=\"hljs-comment\">// epic to remove</span>\n    {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'epic 1'</span>},\n  ]\n},\n<span class=\"hljs-attr\">tasks</span>: {\n  <span class=\"hljs-attr\">list</span>: [\n    {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">epicId</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'epic 0 first task'</span>}, <span class=\"hljs-comment\">// task to remove (epicId: 0)</span>\n    {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">epicId</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'epic 0 second task'</span>}, <span class=\"hljs-comment\">// task to remove (epicId: 0)</span>\n    {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">epicId</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'epic 1 first task'</span>},\n    {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">epicId</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'epic 1 second task'</span>},\n  ]\n}\n};\n\n<span class=\"hljs-keyword\">const</span> expectedEpicList = [\n  {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'epic 1'</span>},\n];\n\n<span class=\"hljs-keyword\">const</span> expectedTaskList = [\n  {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">epicId</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'epic 1 first task'</span>},\n  {<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">epicId</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'epic 1 second task'</span>},\n];\n\n<span class=\"hljs-keyword\">const</span> store = getStore(preloadedState);</code></pre>\n<h3>Act</h3>\n<p>The only thing Act does is call <code>removeEpicAndItsTasksThunk</code> with some id (0 in our case). Additionally, we cover <code>removeTasksById</code> and <code>removeEpicById</code> methods.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Act</span>\n<span class=\"hljs-keyword\">await</span> store.dispatch(removeEpicAndItsTasksThunk(<span class=\"hljs-number\">0</span>));</code></pre>\n<h3>Assert</h3>\n<p>In this section, we check if the state after calling <code>removeEpicAndItsTasksThunk</code> method is correct. Besides, we test two selectors: <code>getEpicsList</code> and <code>getTasksList</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Assert</span>\n<span class=\"hljs-keyword\">const</span> state = store.getState();\n<span class=\"hljs-keyword\">const</span> epicList = getEpicsList(state);\n<span class=\"hljs-keyword\">const</span> taskList = getTasksList(state);\n\nexpect(epicList).toEqual(expectedEpicList);\nexpect(taskList).toEqual(expectedTaskList);</code></pre>\n<h2>Summary</h2>\n<p>The presented approach of thunk testing provides high code coverage. We do not check implementation details, only the result. We increase the resistance of tests to change in the code that do not affect the resulting state of the application</p>\n<p>Check out a <a href=\"https://github.com/wozniaklukasz/blog-testing-of-redux-thunk-action\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">repository with described example</a>.</p>\n","title":"Testing of redux thunk action","date":"2021-03-30","tags":["javascript","redux","redux-thunk","jest","testing"],"description":"Practical approaches to test an application that uses async redux thunk action. Test will check effect of dispatched action on the state.","slug":"testing-of-redux-thunk-action","image":"testing-of-redux-thunk-action.jpg"}},"__N_SSG":true}